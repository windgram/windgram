@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Mvc.Localization
@model Windgram.Identity.STS.Models.Account.ExternalLoginConfirmationViewModel

@{
    ViewData["Title"] = Localizer["Title"];
    Layout = "~/Views/Shared/_LayoutAccount.cshtml";
}

<h2>@ViewData["Title"]</h2>

<h4>@Localizer["SubTitle", ViewData["LoginProvider"]]</h4>

<form asp-action="Confirmation" asp-route-returnUrl="@ViewData["returnUrl"]" method="post" class="form-horizontal">
    <hr />
    @await Html.PartialAsync("_ValidationSummary")
    <div class="alert alert-info" role="alert">
        @Localizer["Info", ViewData["LoginProvider"]]
    </div>
    <div class="form-group">
        <label asp-for="Email" class="control-label">@Localizer["Email"]</label>
        <div class="input-group mb-3">
            <input asp-for="Email" class="form-control" />
            <button class="btn btn-outline-secondary" type="button" onclick="sendCode(this)">@Localizer["SendCode"]</button>
        </div>
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Code" class="control-label">@Localizer["Code"]</label>
        <input asp-for="Code" class="form-control" />
        <span asp-validation-for="Code" class="text-danger"></span>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">@Localizer["Register"]</button>
    </div>
</form>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        var isPosting = false;
        function sendCode(button) {
            if (!isPosting) {
                button.setAttribute('disabled', 'true');
                isPosting = true;
                let countingDown = 60;
                var interval = setInterval(() => {
                    countingDown--;
                    button.innerText = countingDown + 's';
                    if (countingDown === 0) {
                        button.removeAttribute('disabled');
                        isPosting = false;
                        button.innerText = '@Localizer["ResendCode"]';
                        clearInterval(interval);
                    }
                }, 1000);
                requestSendCode(document.getElementById('Email').value);
            }
        }
        function requestSendCode(email) {
            var csrfToken = getCookie("CSRF-TOKEN");
            console.log(csrfToken);
            console.log(email);
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (xhttp.readyState == XMLHttpRequest.DONE) {
                    if (xhttp.status == 200) {
                        alert(xhttp.responseText);
                    } else {
                        alert('短信发送请求失败');
                    }
                }
            };
            xhttp.open('POST',@Url.Action("GenerateChangeEmailCode") , true);
            xhttp.setRequestHeader("Content-type", "application/json");
            xhttp.setRequestHeader("X-CSRF-TOKEN", csrfToken);
            xhttp.send(JSON.stringify({ "email": email }));
        }
    </script>
}
